//T√≠nh s·ªë Fibonacci th·ª© n, v·ªõi c√¥ng th·ª©c
//t√≠nh ch·∫•t con f(n)=f(n‚àí1)+f(n‚àí2)
//Gi·∫£i ph√°p Memoization (Top-Down)
function fib(n, memo = {}) {
    if (n <= 1) return n; //ƒëi·ªÅu ki·ªán c∆° s·ªü
    if (memo[n]) return memo[n]; // N·∫øu ƒë√£ t√≠nh, tr·∫£ v·ªÅ gi√° tr·ªã l∆∞u tr·ªØ
    memo[n] = fib(n - 1, memo) + fib(n - 2, memo); // T√≠nh to√°n v√† l∆∞u k·∫øt qu·∫£
    return memo[n];
    
}
console.log("üöÄ ~ fib ~ fib:", fib(10))
// gi·∫£i ph√°p Tabulation (Bottom-Up Approach)
//ƒëi·ªÅu ki·ªán c∆° s·ªü f(0)=0,f(1)=1
function Fib(n) {
    if (n <= 1) return n;
     const dp = [0, 1]; // Kh·ªüi t·∫°o b·∫£ng l∆∞u tr·ªØ
    for (let i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2]; // C√¥ng th·ª©c t√≠nh Fibonacci
    }
    return dp[n];
}
console.log("üöÄ ~ Fib ~ Fib:", Fib(10))
//T√¨m t·ªïng l·ªõn nh·∫•t c·ªßa m·ªôt d√£y con li√™n ti·∫øp trong m·∫£ng.
//T√≠nh ch·∫•t con: N·∫øu bao g·ªìm ph·∫ßn t·ª≠ ar[i]: dp[i]=max(arr[i],dp[i-1]+arr[i])
//ƒêi·ªÅu ki·ªán c∆° s·ªü:dp[0]=arr[0]
function maxSum(arr) {
    let maxSum = arr[0];
    let currentSum = arr[0];
    for (let i = 1; i < arr.length; i++) {
        currentSum = Math.max(arr[i], currentSum + arr[i]); // T√≠nh t·ªïng l·ªõn nh·∫•t t·∫°i i
        maxSum = Math.max(maxSum, currentSum); // C·∫≠p nh·∫≠t t·ªïng l·ªõn nh·∫•t
    }
    return maxSum;
}
console.log("üöÄ ~ maxSum ~ maxSum:", maxSum([1,2,3,4,2,3,4,5,6,3]))
// T√≠nh s·ªë c√°ch s·∫Øp x·∫øp n c√°i gh·∫ø
//t√≠nh ch√¢t con dp[n]=n*dp[n‚àí1]
// ƒêi·ªÅu ki·ªán c∆° s·ªü dp[0]=1
function ChairArrangement(n) {
    if (n < 0) return 0;// Kh√¥ng c√≥ c√°ch s·∫Øp x·∫øp khi n √¢m
    const dp = [1];  // ƒêi·ªÅu ki·ªán c∆° s·ªü 
    for (let i = 1; i <= n; i++) {
        dp[i] = i * dp[i - 1]; // C√¥ng th·ª©c t√≠nh s·ªë c√°ch s·∫Øp x·∫øp
    }
    return dp[n]; // Tr·∫£ v·ªÅ s·ªë c√°ch s·∫Øp x·∫øp n c√°i gh·∫ø
}
console.log("üöÄ ~ CountChairs~CountChairs:", ChairArrangement(5))
 
