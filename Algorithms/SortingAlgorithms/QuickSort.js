// //H√†m  swap gi√° tr·ªã
// function swap(arr, a, b) {
//     let temp = arr[a];  // L∆∞u gi√° tr·ªã c·ªßa ph·∫ßn t·ª≠ t·∫°i v·ªã tr√≠ `a`
//     arr[a] = arr[b];    // G√°n gi√° tr·ªã t·∫°i v·ªã tr√≠ `b` v√†o `a`
//     arr[b] = temp;      // G√°n gi√° tr·ªã l∆∞u t·∫°m v√†o v·ªã tr√≠ `b`
// }
// const Compare = {
//     LESS_THAN: -1,
//     BIGGER_THAN: 1
// };
// //H√†m ƒë·ªÉ so s√°nh gi√° tr·ªã
// function defaultCompare(a, b) {
//     if (a === b) {
//         return 0;// Hai gi√° tr·ªã b·∫±ng nhau
//     }
//     return a < b ? Compare.LESS_THAN : Compare.BIGGER_THAN;
// }
// // h√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán s·∫Øp x·∫øp nhanh
// function quickSort(arr, compare = defaultCompare) {
//     return quick(arr, 0, arr.length - 1, compare);
// }
// //th·ª±c hi·ªán vi·ªác chia nh·ªè m·∫£ng ƒë·ªÉ √°p d·ª•ng thu·∫≠t to√°n s·∫Øp x·∫øp nhanh
// function quick(arr, left, right, compare) {
//     let i;
//     if (arr.length > 1) {
//         i = partition(arr, left, right, compare); // T√¨m v·ªã tr√≠ ph√¢n v√πng
//         if (left < i - 1) {
//             quick(arr, left, i - 1, compare); // ƒê·ªá quy b√™n tr√°i pivot
//         }
//         if (i < right) {
//             quick(arr, i, right, compare); // ƒê·ªá quy b√™n ph·∫£i pivot
//         }
//     }
//     return arr;
// }
// //ph√¢n v√πng m·∫£ng d·ª±a tr√™n m·ªôt gi√° tr·ªã ch·ªët (pivot)
// function partition(arr, left, right, compare) {
//     const pivot = arr[Math.floor((left + right) / 2)]; // Ch·ªçn pivot (gi·ªØa m·∫£ng)
//     let i = left;  // Ch·ªâ s·ªë b√™n tr√°i
//     let j = right; // Ch·ªâ s·ªë b√™n ph·∫£i

//     while (i <= j) {
//         while (compare(arr[i], pivot) === Compare.LESS_THAN) {
//             i++; // T√¨m ph·∫ßn t·ª≠ l·ªõn h∆°n ho·∫∑c b·∫±ng pivot
//         }
//         while (compare(arr[j], pivot) === Compare.BIGGER_THAN) {
//             j--; // T√¨m ph·∫ßn t·ª≠ nh·ªè h∆°n ho·∫∑c b·∫±ng pivot
//         }
//         if (i <= j) {
//             swap(arr, i, j); // Ho√°n ƒë·ªïi ph·∫ßn t·ª≠ kh√¥ng ƒë√∫ng v·ªã tr√≠
//             i++;
//             j--;
//         }
//     }
//     return i; // Tr·∫£ v·ªÅ v·ªã tr√≠ ph√¢n v√πng
// }
// console.log("üöÄ ~ quickSort ~ quickSort:", quickSort([3,4,2,5,6,8,10]))
// s·ª± d·ª•ng ƒë·ªÉ quy ƒë·ªÉ gi·∫£i h√†m quick sort
function quickSort(arr) {
    if (arr.length<2) {
        return arr
    }
    let pivot = arr[arr.length - 1];
    let right = [];
    let left = [];
    for (let index = 0; index < arr.length; index++) {
        //n·∫øu nh·ªè h∆°n pivot th√¨ ƒë·∫©y qua b√™n tr√°i
        if (arr[index] < pivot) {
            left.push(arr[index]);
        }
        // n·∫øu l·ªõn h∆°n pivot th√¨ ƒë·∫©y qua b√™n ph·∫£i
        if (arr[index] > pivot) {
            right.push(arr[index]);
        }
        
    }
    // s·ª± d·ª•ng ƒë·ªá quy ƒë·ªÉ s·∫Øp x·∫øp m·∫£ng left(ƒë√£ s·∫Øp x·∫øp) th√™m pivot v√†o gi·ªØa v√† m·∫£ng right (ƒë√£ s·∫Øp x·∫øp)
    return [...quickSort(left),pivot,...quickSort(right)]
}
const arr = [2,3,4,12,3,5,23]
console.log("üöÄ ~ quickSort ~ quickSort:", quickSort(arr))

